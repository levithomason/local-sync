"use strict";let cache={},length=0;const memoryStorage={getItem:e=>cache[e]||null,setItem(e,t){void 0===t?this.removeItem(e):(cache[e]=t.toString(),length++)},removeItem(e){cache[e]&&(delete cache[e],length--)},key:e=>Object.keys(cache)[e]||null,clear(){cache={},length=0},get length(){return length}},escapeRegExp=e=>e.replace(/[|\\{}()[\]^$+*?.]/g,"\\$&"),storage=function(){let e=localStorage;try{const t=Date.now().toString(36);e.setItem("uid",t),e.getItem("uid")!==t&&(console.info("LocalSync: localStorage read/write is inconsistent, falling back to in-memory storage."),e=memoryStorage),e.removeItem("uid")}catch(t){console.error(t),console.info("LocalSync: localStorage was not available, falling back to in-memory storage."),e=memoryStorage}return{get:t=>e.getItem(t),set:(t,r)=>e.setItem(t,r),remove:t=>e.removeItem(t),key:t=>e.key(t),length:()=>e.length}}();class LocalSync{constructor(e={}){if(!(e instanceof Object))throw new Error('LocalSync "options" must be an object.');const t=this._validateBucket(e.bucket||"default"),r=this._validatePrefix(e.prefix||"ls"),a=this._validateSeparator(e.separator||".");Object.defineProperties(this,{_bucket:{value:t,writable:!0,enumerable:!1,configurable:!1},_prefix:{value:r,writable:!0,enumerable:!1,configurable:!1},_separator:{value:a,writable:!0,enumerable:!1,configurable:!1}})}_mapKeys(e){const t=[];for(let r=storage.length()-1;r>=0;--r){const a=storage.key(r);-1!==a.indexOf(this._fullBucket())&&t.unshift(e(this._parseKey(a)))}return t}_mapBuckets(e){const t=[];for(let r=storage.length()-1;r>=0;--r){const a=storage.key(r);-1!==a.indexOf(this._prefix)&&t.unshift(e(this._parseBucket(a)))}return t}_fullBucket(){return[this._prefix,this._bucket].join(this._separator)}_fullKey(e){return[this._fullBucket(),e].join(this._separator)}_parseBucket(e){const t=escapeRegExp(this._prefix),r=escapeRegExp(this._separator),a=new RegExp(`${t}${r}(.*)${r}`),o=e.match(a);return o&&o[1]||void 0}_parseKey(e){const t=this._fullKey("fakeKey").replace("fakeKey",""),r=new RegExp(escapeRegExp(t));return e.replace(r,"")}_validatePrefix(e){if("string"!=typeof e)throw new Error('LocalSync "prefix" must be a string.');if(-1!==e.indexOf(" "))throw new Error('LocalSync "prefix" cannot contain spaces.');if(-1!==e.indexOf(this._separator))throw new Error(`LocalSync "prefix" cannot contain the separator "${this._separator}".`);return e}_validateSeparator(e){if("string"!=typeof e)throw new Error('LocalSync "separator" must be a string.');if(1!==e.length)throw new Error('LocalSync "separator" must be a single character.');return e}_validateBucket(e){if("string"!=typeof e)throw new Error('LocalSync "bucket" must be a string.');if(-1!==e.indexOf(" "))throw new Error('LocalSync "bucket" cannot contain spaces.');if(-1!==e.indexOf(this._separator))throw new Error(`LocalSync "bucket" cannot contain the separator "${this._separator}".`);return e}_validateKey(e){if("string"!=typeof e)throw new Error('LocalSync "key" parameter must be a string.');if(-1!==e.indexOf(this._separator))throw new Error(`LocalSync "key" cannot contain the separator "${this._separator}".`);return e}_validateValue(e){const t=e=>Object.prototype.toString.call(e);if(![null,void 0,!0,0,"",[],{}].some(r=>t(e)===t(r)))throw new Error(`LocalSync cannot store "value" of type ${t(e)}`);return e}setBucket(e){return this._bucket=this._validateBucket(e),this._bucket}getBucket(){return this._bucket}allBuckets(){return this._mapBuckets(e=>e)}get(e){this._validateKey(e);const t=storage.get(this._fullKey(e));try{return"undefined"===t?void 0:JSON.parse(t)}catch(e){throw console.error("Could not JSON.parse() value:",t),e}}set(e,t){return this._validateKey(e),this._validateValue(t),storage.set(this._fullKey(e),JSON.stringify(t)),this.get(e)}put(e,t){return this._validateKey(e),this._validateValue(t),this.set(e,Object.assign({},this.get(e),t))}remove(e){this._validateKey(e);const t=this.get(e);return storage.remove(this._fullKey(e)),t}clear(){this.getAll().forEach(e=>{this.remove(Object.keys(e)[0])})}keys(){return this._mapKeys(e=>e)}values(){return this._mapKeys(e=>this.get(e))}getAll(){return this._mapKeys(e=>({[e]:this.get(e)}))}}module.exports=LocalSync;//# sourceMappingURL=local-sync.min.js.map
